type Query{
    users: [User]
    user(id: ID!): User
    tl_questions: Data
    en_questions: Data
}


type Mutation{
    ask(question: String!): MessageChatbot
    create_chatbot(name: String,
    locale: String, data: [ChatbotDataInput]): Chatbot
    answerTlChatbot(question: String!, answer: String!): MessageChatbot
    answerEnChatbot(question: String!, answer: String!): MessageChatbot
    deleteTlQuestion(question: String!): MessageDelete
    deleteEnQuestion(question: String!): MessageDelete
}

type Subscription {
    messageConvo: MessageChatbot
}

type MessageDelete{
    message: String
}

type MessageChatbot{
    answer: String
}

type Data{
    data: [String]
}

type Chatbot{
    name: String
    locale: String
    data: [ChatbotData]
}

type ChatbotData{
    intent: String
    utterances: [ChatbotUtterance]
    answers: [ChatbotAnswer],
}

type ChatbotAnswer{
    answer: String
}

type ChatbotUtterance{
    utterance: String
}

input ChatbotDataInput{
    intent: String
    utterances: [String]
    answers: [String],
}

input ChatbotAnswerInput{
    answer: String
}

input ChatbotUtteranceInput{
    utterance: String
}