scalar Upload
type Query{
    users: [User]
    users_filter(value: String!): [User]
    user(id: ID!): User
    user_read_notif(id: ID!): User
}

type Mutation{
    user_auth(token: String!): User
    user_login(email: String!, password: String!): AuthPayload
    user_signup(email: String!, password: String!, file: Upload!): AuthPayload
    user_update(id: ID!, email: String, password: String): User
    user_delete(id: ID!): Message
    user_verify_email(email: String!): Reset
    user_reset_password(token: String!, password: String!, confirmPassword: String!): Reset
}

type Subscription {
    user_loginUser: AuthPayload
    users: [User]
}

type AuthPayload{
    token: String,
    user: User 
}

type User {
    _id: ID
    name: String
    email: String
    isVerified: Boolean
    hasNewNotif: Boolean
    image: UserImage
    createdAt: Date
}

type UserImage {
    public_id: String
    url: String
}

type Message{
    message: String
}

type Reset{
    success: Boolean
    message: String
}